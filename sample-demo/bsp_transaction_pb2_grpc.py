# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bsp_transaction_pb2 as bsp__transaction__pb2


class CommitNotifierStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeTxCommitEventByClientID = channel.unary_stream(
                '/bsp_transaction.CommitNotifier/SubscribeTxCommitEventByClientID',
                request_serializer=bsp__transaction__pb2.CommitEventRequestByClientID.SerializeToString,
                response_deserializer=bsp__transaction__pb2.TxEvent.FromString,
                )
        self.Execute = channel.unary_unary(
                '/bsp_transaction.CommitNotifier/Execute',
                request_serializer=bsp__transaction__pb2.Proposal.SerializeToString,
                response_deserializer=bsp__transaction__pb2.ProposalResponse.FromString,
                )
        self.Deliver = channel.unary_stream(
                '/bsp_transaction.CommitNotifier/Deliver',
                request_serializer=bsp__transaction__pb2.DeliverRequest.SerializeToString,
                response_deserializer=bsp__transaction__pb2.ECBlock.FromString,
                )
        self.ProcessMCBlock = channel.unary_unary(
                '/bsp_transaction.CommitNotifier/ProcessMCBlock',
                request_serializer=bsp__transaction__pb2.MCBlock.SerializeToString,
                response_deserializer=bsp__transaction__pb2.MCResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/bsp_transaction.CommitNotifier/Ping',
                request_serializer=bsp__transaction__pb2.HelloRequest.SerializeToString,
                response_deserializer=bsp__transaction__pb2.HelloResponse.FromString,
                )


class CommitNotifierServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeTxCommitEventByClientID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deliver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessMCBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommitNotifierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeTxCommitEventByClientID': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTxCommitEventByClientID,
                    request_deserializer=bsp__transaction__pb2.CommitEventRequestByClientID.FromString,
                    response_serializer=bsp__transaction__pb2.TxEvent.SerializeToString,
            ),
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=bsp__transaction__pb2.Proposal.FromString,
                    response_serializer=bsp__transaction__pb2.ProposalResponse.SerializeToString,
            ),
            'Deliver': grpc.unary_stream_rpc_method_handler(
                    servicer.Deliver,
                    request_deserializer=bsp__transaction__pb2.DeliverRequest.FromString,
                    response_serializer=bsp__transaction__pb2.ECBlock.SerializeToString,
            ),
            'ProcessMCBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMCBlock,
                    request_deserializer=bsp__transaction__pb2.MCBlock.FromString,
                    response_serializer=bsp__transaction__pb2.MCResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=bsp__transaction__pb2.HelloRequest.FromString,
                    response_serializer=bsp__transaction__pb2.HelloResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bsp_transaction.CommitNotifier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommitNotifier(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeTxCommitEventByClientID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bsp_transaction.CommitNotifier/SubscribeTxCommitEventByClientID',
            bsp__transaction__pb2.CommitEventRequestByClientID.SerializeToString,
            bsp__transaction__pb2.TxEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bsp_transaction.CommitNotifier/Execute',
            bsp__transaction__pb2.Proposal.SerializeToString,
            bsp__transaction__pb2.ProposalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deliver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bsp_transaction.CommitNotifier/Deliver',
            bsp__transaction__pb2.DeliverRequest.SerializeToString,
            bsp__transaction__pb2.ECBlock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessMCBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bsp_transaction.CommitNotifier/ProcessMCBlock',
            bsp__transaction__pb2.MCBlock.SerializeToString,
            bsp__transaction__pb2.MCResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bsp_transaction.CommitNotifier/Ping',
            bsp__transaction__pb2.HelloRequest.SerializeToString,
            bsp__transaction__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
