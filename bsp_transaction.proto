syntax = "proto3";

package bsp_transaction;

message Version {
    uint64 BlockNumber = 1;
    uint64 TxOffset = 2;
}
message VersionedValue {
    bytes Value = 1;
    Version Version = 2;
}

message StateBatch {
    string Key = 1;
    VersionedValue VV = 2;
}

message KVRead {
    string key = 1;
    bytes value = 2;
    Version version = 3;
}

message KVWrite {
    string key = 1;
    bytes value = 2;
}

message TxInput {
    string chaincode_id = 1;
    string chaincode_version = 2;
    repeated string chaincode_args = 3;
    repeated KVRead reads = 4;
}

// VersionMap represents version mapping information between Edgechain and Mainchain
// Recorded  when updating MainchainDB and used for MVCC on ReadSet
message VersionMap {
    string Key = 1;
    Version EdgechainVersion = 2;
    Version MainchainVersion = 3;
}

message TxOutput {
    repeated KVWrite writes = 1;
}

message ChangeTriggerEvent {
    ChangeTriggerCode Code = 1;
    bytes Payload = 2; // Expected to be unmarshaled depending on trigger code
}

enum ChangeTriggerCode {
    INVALID_SIGNATURE = 0;
    EdgechainSafety = 1;
    EdgechainLiveness = 2;
    MainchainSafety = 4;
    MainchainLiveness = 3;
}

// BspTransactionType is assigned to each BspTransaction before it is executed.
enum BspTransactionType {
    IntraTx = 0;
    // InterTx_ShouldLock
    InterTx = 2;
    InterTx_ShouldLock = 3;
    // InterTx_NoLock 
    InterTx_NoLock = 4;

    MCAuditTx = 10;
    ECAuditTx = 11;
    NewViewTx = 20;

    // deprecated types
    SyncTx = 30;

    None = 100;
}

// BspTransaction is a transaction made by BSP,
// enabling the re-execution-based verification (i.e., checkchain logic validation) by peers
// Note that this is possible by containing TxInput and TxOutput
message BspTransaction {
    string ClientId = 1;
    string TxId = 2;
    uint64 Seq = 3;
    TxInput Input = 4;
    TxOutput Output = 5;
    bytes Signature = 6;
    bytes Proposal = 7;
    BspTransactionType type = 10;
    string Region = 11;
    bytes TxMetadata = 20;
}

// TxMetadata useful for catching latency for InterTx
message TxMetadata {
    float MetricSubmittedTime = 1;
    float MetricMainchainArrivalTime = 2;
    float MetricCommitTime = 3;
}

message CommitEventRequestByClientID {
    string header = 1;
    string client_id = 2;
    bytes signature = 3;
    string peer_id = 4;
}

enum CommitEventReplyType {
    Speculative = 0; // A speculative response from BSP.
    UP_TO_DATE = 1; // After the peer receives BSP block.
    BFT = 2; // After the peer finishes a consensus on a range of blocks.
    BFT_TX = 3;
    TSA = 4; // After the peer found TSA signautre.
    Early = 5; // early bsp-commit without full-validation (VSCC)
}

// EventUnit defines that this event is whether block-based notification or tx-based notification
enum EventUnit {
    Block = 0;
    Tx = 1;
}

//
message TxEventPayload {
    string ClientID = 1;
    string TxId = 2;
    uint64 Number = 3;
    uint64 Offset = 4;
    ConsensusState State = 5; // 
    string ActiveBSPAddress = 6;
    bytes Extension = 10;
}

// Use this !
message TxEvent {
    bytes Payload = 1;
    bytes Signature = 2; // signature over payload ...
    bytes SignatureHeader = 3;// Signature Header
}

message TransactionCommitEvent {
    string client_id = 1;
    int32 index_in_block = 2;
    string txid = 3;
    int32 validation_code  = 4;
    string chaincode_id = 5;
    string chaincode_version = 6;
    string peer_id = 7;
    // number is a block number that this transaction is committed
    uint64 number = 8;
    bytes signature = 9;
}

message BFTEvent {
    // below 4 fields used when block-based event notification
    uint64 prepare_height = 2;
    uint64 commit_height = 3;
    uint64 latest_height = 4;
    string peer_id = 5;
    bytes signature = 6;
}

message BFTEventByTx {
    // below 2 fields used for tx-based event notification 
    string txid = 1; 
    string client_id = 2;
    string peer_id = 3;
    bytes signature = 4;
}

message TSAEvent {
    // An identity of TSA, i.e., one of the auditor's identity for now
    string tsa_identity = 1;

    // A block height that the TSA has endorsed
    uint64 height = 2;
    bytes signature = 3;
}

message CommitEventResponse {
    CommitEventReplyType reply_type = 1; // One of TransactionCommitEvent(BSP=Up-to-date), BFTEvent, TSAEvent
    bytes payload = 2; // Marshaled TransactionCommitEvent message... BftEvent / TsaEvent
    bytes signature = 3;
}


// TxRequest by client to BSP
message Proposal {
    bytes Payload = 1;
    bytes Signature = 2; // signature over payload ...
    bytes SignatureHeader = 3;// Signature Header
    /* bytes payload = 7; */
}

message ProposalPayload {
    string ClientId = 1;
    string TxId = 2;
    string ChaincodeId = 3;
    repeated string ChaincodeArgs = 4;
    // extensionPayload reserved for MC-Audit Tx
    bytes ExtensionPaylod = 5;
}

message SignatureHeader {
    bytes creator = 1; // serializedIdentity
    bytes nonce = 2;
}

// TxResponse by BSP to client
message ProposalResponse {
    bytes payload = 1;
    bytes signature = 2;
    bytes signature_header = 3;
    string status = 4;
}

message InitializeRequest {

}

message HelloRequest {
    string msg = 1;
}

message HelloResponse {
    string msg = 1;
}

message AuditTransaction {
    bytes payload = 1;
    bytes signature = 2;
    bytes signature_header = 3;
}

enum AuditType {
    EC = 0;
    MC = 1;
    UNKNOWN = 99;
}

message AuditTransactionPayload {
    AuditType type = 1; // Mainchain or Edgechain
    string ChainID = 2;
    string RegionID = 3; // Region ID the chainID belongs to
    string ActiveID = 4; // BSP ID
    repeated string StanbyIDs = 5;

    uint64 Number = 10; // current block number
    bytes Hash = 11; // Current block Hash
    bytes PrevHash = 12; // Previous block hash

    string Member = 13; // Auditor ID

    // MerkleRootHash
    bytes MerkleRootHash = 14;

    bytes CreatorSignature = 15;
    bytes extension = 20;
}

// AuditTransactionExtension is mainchain (MC-AuditTx)
message AuditTransactionExtension  {
    /* repeated ECProof ecproofs  = 2; */
    repeated InterTxResult interTxResults = 3;
    MCBuildParameter MCparameters = 4;
    MCHeader MainchainHeader = 5;
}

// ECProof would be a merkle proof that consists of a set of ec-blocks, each from edge chains
/* message ECProof { */
/*     repeated BlockHeaderWithProv headers = 3; */
/* } */

/* message BlockHeaderWithProv { */

/* } */

message MCBuildParameter {
    OrderingMethod OrderingMethod = 1;
    bytes BuildParameter = 2; // Method-specific parameters, (i.e., BuildParameterOfIndexBasedOrdering or BuildParameterDependencyGraphBasedOrdering)
}

// assumes that all edge chains are euqally generating their blocks
message BuildParameterOfIndexBasedOrdering {
    uint64 BucketSize = 1; 
    uint64 StartBlockNumber = 2; 
}

message BuildParameterOfDependencyGraphBasedReOrdering {
    string ReOrderingMethod = 1;
}


enum OrderingMethod {
    IndexBasedOrdering = 0;
    DependencyGraphBasedOrdering = 1;
}



message ConsensusState {
    enum Result {
        Commit = 0;
        Abort = 1;
    }

    enum Level {
        EC_Spec = 0;
        EC_Ordered = 1;
        EC_Prepared = 2;
        EC_Commit = 3;
        MC_Ordered = 4;
        MC_Commit = 5;
        TSA = 10;
    }
    
    Level level = 1;
    Result result = 2;
}

message InterTxResult {
    ConsensusState State = 1;
    string TxID = 2;
    repeated KVRead reads = 3;
    repeated KVWrite writes = 4;

    string ChainID = 5;
    string RegionID = 6; // Region ID the chainID belongs to
    string ActiveID = 7; // BSP ID
    Version MCVersion = 8;
    bytes metadata = 9;  // performance metrics

    Version ECHeight = 10;
    string ClientID = 11;
}

message MCHeader {
    // Mainchain Build Round
    uint64 Round = 1;
    // Mainchain Block Number
    uint64 Number = 2;
    // Mainchain Block Header hash
    bytes Hash = 3;
    // Mainchain Previous Header hash
    bytes PrevHash = 4;
    // Merkle root hash over all EC-Headers
    bytes MerkleRootHash = 5;
    // Mainchain block build configurations
    bytes MCBuildParameter = 6;
    // Set of ECHeaders (ordered by BSP name, block#)
    repeated ECHeader ECHeaders = 7;
    // Set of Non-EC Commit Blocks (for detecting Block-witholding attack), 
    // Blocks corresponding to NonCommitBlocks not appear in MC-Block body
    repeated ECHeader NonCommitBlockHeaders  = 8; 
}

message MCBlock {
    MCHeader Header = 1;
    repeated ECBlock blocks = 2;
}

message ECHeader {
    // Marshaled HLF common.Header
    bytes Header = 1;
    string Region = 2;
}

message ECBlock {
    // Marshaled HLF common.Block
    bytes Block = 1; 
    //  Name of the region that this block belongs to. (e.g., edgechain1)
    string Region = 2;
}

message MCResponse {
    string msg = 1;
}

message DeliverRequest {
    bytes Request = 1; // *common.Envelope
    string From = 2;
}

message HeartbeatPayload {
    string Timeout = 1;
    string Region = 2;
}

message HeartbeatTransaction {
    bytes Payload = 1;
    bytes Signature = 2;
    bytes SignatureHeader = 3;
}

message Policy {
    ConsensusState.Level level = 1;
    uint64 QuorumSize = 2;
}

message AggregatorSubscribeRequest {
    string SubscriberId = 1;
    string EventSourceId = 2;
    Policy  Policy = 3;
}

message AggregatorResponse {
    string TxId = 1;
    string ClientId = 2;
    string Status = 3;
}


service CommitNotifier {
  rpc SubscribeTxCommitEventByClientID (CommitEventRequestByClientID) returns (stream TxEvent);
  rpc Execute (Proposal) returns (ProposalResponse);

  rpc Deliver(DeliverRequest) returns (stream ECBlock);
  rpc ProcessMCBlock(MCBlock) returns  (MCResponse);


  rpc Ping (HelloRequest) returns (HelloResponse);
}


service Aggregator {
    rpc RegisterClientWithPolicy (AggregatorSubscribeRequest) returns (stream AggregatorResponse);
    rpc ProcessProposal(Proposal)  returns (ProposalResponse);
}
